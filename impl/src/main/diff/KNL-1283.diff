Index: kernel-impl/src/main/java/org/sakaiproject/content/impl/BaseContentService.java
===================================================================
--- kernel-impl/src/main/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 310731)
+++ kernel-impl/src/main/java/org/sakaiproject/content/impl/BaseContentService.java	(working copy)
@@ -6013,52 +6013,24 @@
 
 
     }
-	private boolean checkUpdateContentEncoding(ContentResourceEdit edit) {
-		if (edit == null) {
-			return false;
-		}
-		M_log.debug("checkUpdateContentEncoding(" + edit.getId() + ")");
-
-		InputStream content = null;
-		boolean updated = false;
+	private void checkUpdateContentEncoding(ContentResourceEdit edit) {
 		try
 		{
-			//no point in doing this for 0 size resources
-			if (edit.getContentLength() == 0)
-			{
-				return false;
-			}
-			
-			String contentEncoding = edit.getProperties().getProperty(ResourceProperties.PROP_CONTENT_ENCODING);
-			if (contentEncoding == null)
-			{
-				contentEncoding = "";
-			}
-			String encoding = null;
-			CharsetDetector detector = new CharsetDetector();
-			content = edit.streamContent();
-			//we don't want the whole file the first couple of bytes should do
-			int len = 1000;
-			byte[] contentBytes = new byte[len];
-			if (content.markSupported()) 
-			{			
-				detector.setText(content);
-			} else {
-				 content.read(contentBytes);
-				 detector.setText(contentBytes);
-			}
-			CharsetMatch match = detector.detect();
+            String contentEncoding = edit.getProperties().getProperty(ResourceProperties.PROP_CONTENT_ENCODING);
+            CharsetDetector detector = new CharsetDetector();
+            InputStream content = edit.streamContent();
+            if (!content.markSupported())
+            {
+                content = new BufferedInputStream(content);
+                edit.setContent(content);
+            }
+            detector.setText(content);
+            CharsetMatch match = detector.detect();
 			//KNL-714 match can be null -DH
-			if (match != null)
-			{
-				encoding = match.getName();
-			}
-			else
-			{
-				return false;
-			}
+			if (match == null) return;
+            String encoding = match.getName();
 			//KNL-682 do not set content as UTF-32LE or UTF-16
-			if (encoding.indexOf("UTF-16") > -1 || encoding.indexOf("UTF-32") > -1) {
+			if (encoding.contains("UTF-16") || encoding.contains("UTF-32")) {
 				encoding = "UTF-8";
 			}
 
@@ -6066,31 +6038,15 @@
 			//KNL-683 we need a relatively good confidence before we change the encoding
 			int threshold = m_serverConfigurationService.getInt("content.encodingDetection.threshold", 70);
 			M_log.debug("detected character encoding of " + encoding + " with confidence of " + confidence + " origional was" + contentEncoding);
-			if (encoding != null && !contentEncoding.equals(encoding) && (confidence >= threshold))
+			if (!encoding.equals(contentEncoding) && (confidence >= threshold))
 			{
 				ResourcePropertiesEdit rpe = edit.getPropertiesEdit();
 				rpe.removeProperty(ResourceProperties.PROP_CONTENT_ENCODING);
 				rpe.addProperty(ResourceProperties.PROP_CONTENT_ENCODING, encoding);
-				updated = true;
-			} 
-			
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		} catch (ServerOverloadException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		finally {
-			if (content != null) {
-				try {
-					content.close();
-				} catch (IOException e) {
-					//not much we can do
-				}
 			}
+		} catch (Exception e) {
+			M_log.warn("Could not read the encoding.", e);
 		}
-		return updated;
 	}
 
 	/**
@@ -6137,30 +6093,17 @@
 
 		// Flag whether we have a body update or not. This will save expensive DB/IO if we don't need to check the encoding.
 		boolean contentUpdated = ((BaseResourceEdit) edit).m_body != null || ((BaseResourceEdit) edit).m_contentStream != null;
-
-		// complete the edit
-		m_storage.commitResource(edit);
-
-		// Now that the data is committed, we can update the encoding if needed.
+        
+        // Update the encoding if needed.
 		// Check the content type if this is an HTML or TEXT file upload.
 		if (contentUpdated && ResourceType.TYPE_UPLOAD.equals(edit.getResourceType()) && 
 			(ResourceType.MIME_TYPE_HTML.equals(edit.getContentType()) || ResourceType.MIME_TYPE_TEXT.equals(edit.getContentType()))) {
+			checkUpdateContentEncoding(edit);
+		}
 
-			// Any body bytes lying around erroneously should be thrown away
-			// because they would already be committed. We also purge the stream
-			// reference because it would be used up. Additional calls to
-			// streamContent() will generate new ones from storage like we need.
-			((BaseResourceEdit) edit).m_body = null;
-			((BaseResourceEdit) edit).m_contentStream = null;
+		// complete the edit
+		m_storage.commitResource(edit);
 
-			if (edit.isActiveEdit() && checkUpdateContentEncoding(edit)) {
-
-				// The encoding was changed, so we have to flush the metadata.
-				// Since we already cleaned up, we won't write the body again.
-				m_storage.commitResource(edit);
-			}
-		}
-
 		// close the edit object
 		((BaseResourceEdit) edit).closeEdit();
 
