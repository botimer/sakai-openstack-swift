Index: api/src/main/java/org/sakaiproject/content/api/FileSystemHandler.java
===================================================================
--- api/src/main/java/org/sakaiproject/content/api/FileSystemHandler.java	(revision 0)
+++ api/src/main/java/org/sakaiproject/content/api/FileSystemHandler.java	(working copy)
@@ -0,0 +1,41 @@
+package org.sakaiproject.content.api;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * This is the api for reading and writing files to some file system.
+ *
+ */
+public interface FileSystemHandler {
+
+    /**
+     * Retrieves an input stream from the file.
+     * 
+     * @param id The id of the resource. Will not be null or empty.
+     * @param root The root of the storage. Could be null or empty.
+     * @param filePath The path to the file. Will not be null or empty.
+     * @return The valid input stream. Must not be null.
+     * @throws IOException If the stream could not be created.
+     */
+    public InputStream getInputStream(String id, String root, String filePath) throws IOException;
+    /**
+     * Save the file from the input stream to the path and return the content size.
+     * 
+     * @param id The id of the resource. Will not be null or empty.
+     * @param root The root of the storage. Could be null or empty.
+     * @param filePath The path to save the file to. Will not be null or empty.
+     * @param stream The stream to read the file from.
+     * @return The content size.
+     */
+    public long saveInputStream(String id, String root, String filePath, InputStream stream) throws IOException;
+    /**
+     * Delete the file from the path.
+     * 
+     * @param id The id of the resource. Will not be null or empty.
+     * @param root The root of the storage. Could be null or empty.
+     * @param filePath The path to delete. Will not be null or empty.
+     * @return If the path was deleted.
+     */
+    public boolean delete(String id, String root, String filePath);
+}
Index: api/src/main/java/org/sakaiproject/exception/ServerOverloadException.java
===================================================================
--- api/src/main/java/org/sakaiproject/exception/ServerOverloadException.java	(revision 311042)
+++ api/src/main/java/org/sakaiproject/exception/ServerOverloadException.java	(working copy)
@@ -33,4 +33,12 @@
 	{
 		super(id);
 	}
+    
+	/**
+	 * Constructor setting exception message and the cause of the exception.
+	 */
+    public ServerOverloadException(String message, Throwable t)
+    {
+        super(message, t);
+    }
 }
Index: kernel-component/src/main/webapp/WEB-INF/content-components.xml
===================================================================
--- kernel-component/src/main/webapp/WEB-INF/content-components.xml	(revision 311042)
+++ kernel-component/src/main/webapp/WEB-INF/content-components.xml	(working copy)
@@ -18,6 +18,7 @@
 			class="org.sakaiproject.content.impl.DbContentService"
             init-method="init" destroy-method="destroy" singleton="true">
 
+        <property name="fileSystemHandler">         <ref bean="org.sakaiproject.content.api.FileSystemHandler.file"/>           </property>
         <property name="memoryService">              <ref bean="org.sakaiproject.memory.api.MemoryService"/>                 </property>
         <property name="functionManager">			<ref bean="org.sakaiproject.authz.api.FunctionManager"/>				</property>
         <property name="aliasService">               <ref bean="org.sakaiproject.alias.api.AliasService"/>                   </property>
@@ -78,6 +79,10 @@
         </property>
     </bean>
 
+    <bean id="org.sakaiproject.content.api.FileSystemHandler.file" class="org.sakaiproject.content.impl.DefaultFileSystemHandler">
+        <property name="useIdForFilePath" value="true" />
+    </bean>
+
     <bean id="org.sakaiproject.content.impl.CollectionAccessFormatter"
           class="org.sakaiproject.content.impl.CollectionAccessFormatter">
         <property name="formattedText" ref="org.sakaiproject.util.api.FormattedText"/>
Index: kernel-impl/pom.xml
===================================================================
--- kernel-impl/pom.xml	(revision 311042)
+++ kernel-impl/pom.xml	(working copy)
@@ -348,4 +348,71 @@
 
   </dependencies>
 
+  <profiles>
+      <profile>
+		<!-- This profile will enable you to run the StorageConverter -->
+          <id>storage-convert</id>
+          <dependencies>
+              <!-- need to setup this dependency to your database driver. 
+              <dependency>
+                  <groupId>mysql</groupId>
+                  <artifactId>connector</artifactId>
+                  <version>5.1.30</version>
+                  <scope>system</scope>
+                  <systemPath>\dev\servers\Sakai10\lib\mysql-connector-java-5.1.30-bin.jar</systemPath>
+              </dependency>
+			  -->
+          </dependencies>
+          <build>
+              <plugins>
+                  <plugin>
+                      <groupId>org.codehaus.mojo</groupId>
+                      <artifactId>exec-maven-plugin</artifactId>
+                      <version>1.3.1</version>
+                      <!-- This execution runs the storage convertion from one FileSystemHandler to another. -->
+                      <configuration>
+                          <classpathScope>test</classpathScope>
+                          <skip>false</skip>
+                          <executable>java</executable>
+                          <arguments>
+                              <argument>-classpath</argument>
+                              <classpath />
+                              <argument>org.sakaiproject.content.impl.util.StorageConverter</argument>
+                              <!-- Use either a properties file or the properties...or both
+                             <argument>-p</argument>
+                             <argument>src/main/resource/my.properties</argument>
+                              -->
+                              <!-- just set the properties
+                             <argument>-connectionDriver</argument>
+                             <argument>The database connection driver class.</argument>
+                             <argument>-connectionURL</argument>
+                             <argument>The database connection URL.</argument>
+                             <argument>-connectionUsername</argument>
+                             <argument>The database connection username.</argument>
+                             <argument>-connectionPassword</argument>
+                             <argument>The database connection password.</argument>
+                             <argument>-sourceFileSystemHandler</argument>
+                             <argument>This is the full class name of the source FileSystemHandler.</argument>
+                             <argument>-sourceFileSystemHandler.{some property}</argument>
+                             <argument>You can set any property on the source FileSystemHandler by referensing their property names.</argument>
+                             <argument>-sourceBodyPath</argument>
+                             <argument>The path set in sakai.properties for the source.</argument>
+                             <argument>-destinationFileSystemHandler</argument>
+                             <argument>This is the full class name of the destination FileSystemHandler.</argument>
+                             <argument>-destinationFileSystemHandler.{some property}</argument>
+                             <argument>You can set any property on the destination FileSystemHandler by referensing their property names.</argument>
+                             <argument>-destinationBodyPath</argument>
+                             <argument>The path set in sakai.properties for the destination.</argument>
+                             <argument>-deleteFromSource</argument>
+                             <argument>Whether to delete the source files. Default false.</argument>
+                             <argument>-contentSql</argument>
+                             <argument>The sql statement to retrieve the resource id's and paths. Default is new ContentServiceSqlDefault().getResourceIdAndFilePath()</argument>
+                              -->
+                          </arguments>
+                      </configuration>
+                  </plugin>
+              </plugins>
+          </build>
+      </profile>
+  </profiles>
 </project>
Index: kernel-impl/src/main/java/org/sakaiproject/content/impl/BaseContentService.java
===================================================================
--- kernel-impl/src/main/java/org/sakaiproject/content/impl/BaseContentService.java	(revision 311042)
+++ kernel-impl/src/main/java/org/sakaiproject/content/impl/BaseContentService.java	(working copy)
@@ -23,7 +23,6 @@
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
-import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -61,7 +60,6 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.commons.codec.binary.Base64;
-import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
@@ -163,7 +161,6 @@
 import org.sakaiproject.util.ResourceLoader;
 import org.sakaiproject.util.SAXEntityReader;
 import org.sakaiproject.util.SingleStorageUser;
-import org.sakaiproject.util.StorageUser;
 import org.sakaiproject.util.StringUtil;
 import org.sakaiproject.util.Validator;
 import org.sakaiproject.util.Web;
@@ -905,16 +902,6 @@
 					userDirectoryService, m_serverConfigurationService);
 			dbNoti.setAction(dropboxNotification);
 
-			if (m_bodyPathDeleted != null) {
-				File deletedFolder = new File(m_bodyPathDeleted);
-				if (!deletedFolder.exists()) {
-					if (!deletedFolder.mkdirs()) {
-						M_log.error("failed to create bodyPathDeleted " + m_bodyPathDeleted + ". Resource backup to file system has been disabled! Please set with the property: bodyPathDeleted@org.sakaiproject.content.api.ContentHostingService");
-						m_bodyPathDeleted = null;
-					}
-				}
-			}
-
 			StringBuilder buf = new StringBuilder();
 			if (m_bodyVolumes != null)
 			{
@@ -962,6 +949,7 @@
 		}
 
 		this.m_useSmartSort = m_serverConfigurationService.getBoolean("content.smartSort", true);
+        m_useMimeMagic = m_serverConfigurationService.getBoolean("content.useMimeMagic", m_useMimeMagic);
 
 	} // init
 
@@ -5854,6 +5842,30 @@
 			return;
 		}
 		
+        //use magic to fix mimetype
+        //Don't process for special TYPE_URL type
+        String currentContentType = edit.getContentType();
+        if (m_useMimeMagic && DETECTOR != null && !ResourceProperties.TYPE_URL.equals(currentContentType)) {
+            try{
+                //we have to make the stream resetable so tika can read some of it and reset for saving.
+                //Also have to give the tika stream to the edit object since tika can invalidate the original 
+                //stream and replace it with a new stream.
+                TikaInputStream buff = TikaInputStream.get(edit.streamContent());
+                edit.setContent(buff);
+                final Metadata metadata = new Metadata();
+                //This might not want to be set as it would advise the detector
+                metadata.set(Metadata.RESOURCE_NAME_KEY, edit.getId());
+                metadata.set(Metadata.CONTENT_TYPE, currentContentType);
+                String newmatch = DETECTOR.detect(TikaInputStream.get(buff), metadata).toString();
+                if (M_log.isDebugEnabled()) {
+                    M_log.debug("Magic: Setting content type from " + currentContentType + " to " + newmatch);
+                }
+                edit.setContentType(newmatch);
+            } catch (IOException e) {
+				M_log.warn("IOException when trying to get the content type", e);
+			} 
+        }
+        
 		commitResourceEdit(edit, priority);
 
         // Queue up content for virus scanning
@@ -5887,62 +5899,6 @@
 			throw new OverQuotaException(edit.getReference());
 		}
 		
-		TikaInputStream tikastream=null;
-		// magic
-		m_useMimeMagic = m_serverConfigurationService.getBoolean("content.useMimeMagic", m_useMimeMagic);
-		if (m_useMimeMagic && DETECTOR != null) {
-			ContentResourceEdit edit3=null;
-			try {
-				edit3 = editResource(edit.getId());
-				String oldmatch = edit3.getContentType();
-				//Don't process for speical TYPE_URL type
-				if (!ResourceProperties.TYPE_URL.equals(oldmatch)) {
-					tikastream = TikaInputStream.get(edit3.streamContent());
-					final Metadata metadata = new Metadata();
-					//This might not want to be set as it would advise the detector
-					metadata.set(Metadata.RESOURCE_NAME_KEY,edit.getId());
-					String newmatch = DETECTOR.detect(tikastream,metadata).toString();
-					if (newmatch != null) {
-						if (!StringUtils.isEmpty(newmatch) && !newmatch.equals(oldmatch)) {
-							if (M_log.isDebugEnabled()) {
-								M_log.debug("Magic: Setting content type from "+ oldmatch +" to "+newmatch);
-							}
-							edit3.setContentType(newmatch);
-							commitResourceEdit(edit3, priority);
-						}
-					}
-				}
-			} catch (IOException e) {
-				M_log.warn("IOException when trying to get the resource's data: " + e);
-			} catch (PermissionException e1) {
-				// we're unlikely to see this at this point
-				e1.printStackTrace();
-			} catch (IdUnusedException e1) {
-				// we're unlikely to see this at this point
-				e1.printStackTrace();
-			} catch (TypeException e1) {
-				// we're unlikely to see this at this point
-				e1.printStackTrace();
-			} catch (InUseException e1) {
-				// we're unlikely to see this at this point
-				e1.printStackTrace();
-			}
-			finally {
-				//safety first!
-				if (edit3 != null && edit3.isActiveEdit()) {
-					cancelResource(edit3);
-				}
-				if (tikastream != null) {
-					try {
-						tikastream.close();
-					}
-					catch (IOException e) {
-						M_log.warn("IOException when trying to close the resource's data: " + e);
-					}
-				}
-			}
-		}
-		
 		if(! readyToUseFilesizeColumn())
 		{
 			addSizeCache(edit);
@@ -6013,52 +5969,24 @@
 
 
     }
-	private boolean checkUpdateContentEncoding(ContentResourceEdit edit) {
-		if (edit == null) {
-			return false;
-		}
-		M_log.debug("checkUpdateContentEncoding(" + edit.getId() + ")");
-
-		InputStream content = null;
-		boolean updated = false;
+	private void checkUpdateContentEncoding(ContentResourceEdit edit) {
 		try
 		{
-			//no point in doing this for 0 size resources
-			if (edit.getContentLength() == 0)
-			{
-				return false;
-			}
-			
-			String contentEncoding = edit.getProperties().getProperty(ResourceProperties.PROP_CONTENT_ENCODING);
-			if (contentEncoding == null)
-			{
-				contentEncoding = "";
-			}
-			String encoding = null;
-			CharsetDetector detector = new CharsetDetector();
-			content = edit.streamContent();
-			//we don't want the whole file the first couple of bytes should do
-			int len = 1000;
-			byte[] contentBytes = new byte[len];
-			if (content.markSupported()) 
-			{			
-				detector.setText(content);
-			} else {
-				 content.read(contentBytes);
-				 detector.setText(contentBytes);
-			}
-			CharsetMatch match = detector.detect();
+            String contentEncoding = edit.getProperties().getProperty(ResourceProperties.PROP_CONTENT_ENCODING);
+            CharsetDetector detector = new CharsetDetector();
+            InputStream content = edit.streamContent();
+            if (!content.markSupported())
+            {
+                content = new BufferedInputStream(content);
+                edit.setContent(content);
+            }
+            detector.setText(content);
+            CharsetMatch match = detector.detect();
 			//KNL-714 match can be null -DH
-			if (match != null)
-			{
-				encoding = match.getName();
-			}
-			else
-			{
-				return false;
-			}
+			if (match == null) return;
+            String encoding = match.getName();
 			//KNL-682 do not set content as UTF-32LE or UTF-16
-			if (encoding.indexOf("UTF-16") > -1 || encoding.indexOf("UTF-32") > -1) {
+			if (encoding.contains("UTF-16") || encoding.contains("UTF-32")) {
 				encoding = "UTF-8";
 			}
 
@@ -6066,31 +5994,15 @@
 			//KNL-683 we need a relatively good confidence before we change the encoding
 			int threshold = m_serverConfigurationService.getInt("content.encodingDetection.threshold", 70);
 			M_log.debug("detected character encoding of " + encoding + " with confidence of " + confidence + " origional was" + contentEncoding);
-			if (encoding != null && !contentEncoding.equals(encoding) && (confidence >= threshold))
+			if (!encoding.equals(contentEncoding) && (confidence >= threshold))
 			{
 				ResourcePropertiesEdit rpe = edit.getPropertiesEdit();
 				rpe.removeProperty(ResourceProperties.PROP_CONTENT_ENCODING);
 				rpe.addProperty(ResourceProperties.PROP_CONTENT_ENCODING, encoding);
-				updated = true;
-			} 
-			
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		} catch (ServerOverloadException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		finally {
-			if (content != null) {
-				try {
-					content.close();
-				} catch (IOException e) {
-					//not much we can do
-				}
 			}
+		} catch (Exception e) {
+			M_log.warn("Could not read the encoding.", e);
 		}
-		return updated;
 	}
 
 	/**
@@ -6137,30 +6049,17 @@
 
 		// Flag whether we have a body update or not. This will save expensive DB/IO if we don't need to check the encoding.
 		boolean contentUpdated = ((BaseResourceEdit) edit).m_body != null || ((BaseResourceEdit) edit).m_contentStream != null;
-
-		// complete the edit
-		m_storage.commitResource(edit);
-
-		// Now that the data is committed, we can update the encoding if needed.
+        
+        // Update the encoding if needed.
 		// Check the content type if this is an HTML or TEXT file upload.
 		if (contentUpdated && ResourceType.TYPE_UPLOAD.equals(edit.getResourceType()) && 
 			(ResourceType.MIME_TYPE_HTML.equals(edit.getContentType()) || ResourceType.MIME_TYPE_TEXT.equals(edit.getContentType()))) {
+			checkUpdateContentEncoding(edit);
+		}
 
-			// Any body bytes lying around erroneously should be thrown away
-			// because they would already be committed. We also purge the stream
-			// reference because it would be used up. Additional calls to
-			// streamContent() will generate new ones from storage like we need.
-			((BaseResourceEdit) edit).m_body = null;
-			((BaseResourceEdit) edit).m_contentStream = null;
+		// complete the edit
+		m_storage.commitResource(edit);
 
-			if (edit.isActiveEdit() && checkUpdateContentEncoding(edit)) {
-
-				// The encoding was changed, so we have to flush the metadata.
-				// Since we already cleaned up, we won't write the body again.
-				m_storage.commitResource(edit);
-			}
-		}
-
 		// close the edit object
 		((BaseResourceEdit) edit).closeEdit();
 
Index: kernel-impl/src/main/java/org/sakaiproject/content/impl/ContentServiceSql.java
===================================================================
--- kernel-impl/src/main/java/org/sakaiproject/content/impl/ContentServiceSql.java	(revision 311042)
+++ kernel-impl/src/main/java/org/sakaiproject/content/impl/ContentServiceSql.java	(working copy)
@@ -85,6 +85,12 @@
 	 * returns the sql statement which retrieves the resource id and xml fields from the content_resource table.
 	 */
 	String getResourceIdXmlSql();
+    
+    /**
+     * returns the sql statement which retrieves all id's and file paths where the file path is not null.
+     * This is used for converting storage from one FileSystemHandler to another.
+     */
+    public String getResourceIdAndFilePath();
 
 	/**
 	 * returns the sql statement which retrieves resource uuid from the content_resource table.
Index: kernel-impl/src/main/java/org/sakaiproject/content/impl/ContentServiceSqlDefault.java
===================================================================
--- kernel-impl/src/main/java/org/sakaiproject/content/impl/ContentServiceSqlDefault.java	(revision 311042)
+++ kernel-impl/src/main/java/org/sakaiproject/content/impl/ContentServiceSqlDefault.java	(working copy)
@@ -122,6 +122,14 @@
 	{
 		return "select RESOURCE_ID, XML, BINARY_ENTITY from CONTENT_RESOURCE where FILE_PATH IS NULL";
 	}
+    
+    /**
+     * {@inheritDoc}
+     */
+    public String getResourceIdAndFilePath()
+    {
+        return "select RESOURCE_ID, FILE_PATH from CONTENT_RESOURCE where FILE_PATH IS NOT NULL";
+    }
 
 	/**
 	 * returns the sql statement which retrieves the resource uuid from the content_resource table.
Index: kernel-impl/src/main/java/org/sakaiproject/content/impl/DbContentService.java
===================================================================
--- kernel-impl/src/main/java/org/sakaiproject/content/impl/DbContentService.java	(revision 311042)
+++ kernel-impl/src/main/java/org/sakaiproject/content/impl/DbContentService.java	(working copy)
@@ -24,10 +24,6 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.sql.Blob;
@@ -55,6 +51,7 @@
 import org.sakaiproject.content.api.ContentCollectionEdit;
 import org.sakaiproject.content.api.ContentResource;
 import org.sakaiproject.content.api.ContentResourceEdit;
+import org.sakaiproject.content.api.FileSystemHandler;
 import org.sakaiproject.content.api.Lock;
 import org.sakaiproject.content.api.LockManager;
 import org.sakaiproject.content.impl.serialize.impl.conversion.Type1BlobCollectionConversionHandler;
@@ -168,7 +165,34 @@
     /*************************************************************************************************************************************************
      * Constructors, Dependencies and their setter methods
      ************************************************************************************************************************************************/
-
+    
+    /**
+     * The file system handler to use when files are not stored in the database.
+     */
+    private FileSystemHandler fileSystemHandler = new DefaultFileSystemHandler();
+    
+    /**
+     * The file system handler to use when files are not stored in the database.
+     * <p/>
+     * This can be null if files are stored in the database.
+     * <p/>
+     * The Default is DefaultFileSystemHandler.
+     */
+    public FileSystemHandler getFileSystemHandler(){
+        return fileSystemHandler;
+    }
+    
+    /**
+     * The file system handler to use when files are not stored in the database.
+     * <p/>
+     * This can be null if files are stored in the database.
+     * <p/>
+     * The Default is DefaultFileSystemHandler.
+     */
+    public void setFileSystemHandler(FileSystemHandler fileSystemHandler){
+        this.fileSystemHandler = fileSystemHandler;
+    }
+    
     /** Dependency: LockManager */
     protected LockManager m_lockManager = null;
 
@@ -441,6 +465,11 @@
                 convertToFile();
             }
 
+            //Check that there is a valid file system handler
+            if(m_bodyPath != null && fileSystemHandler == null){
+                throw new IllegalStateException("There is no FileSystemHandler set for the ContentService!");
+            }
+
             M_log.info("init(): tables: " + m_collectionTableName + " " + m_resourceTableName + " " + m_resourceBodyTableName + " "
                     + m_groupTableName + " locks-in-db: " + m_locksInDb + " bodyPath: " + m_bodyPath + " storage: " + m_storage);
 
@@ -1782,7 +1811,7 @@
                                 if (m_bodyPath != null)
                                 {
                                     message += "to file";
-                                    ok = putResourceBodyFilesystem(edit, redit.m_contentStream, m_bodyPath);
+                                    ok = putResourceBodyFilesystem(m_bodyPath, edit, redit.m_contentStream);
                                 }
 
                                 // otherwise use the database
@@ -1807,7 +1836,7 @@
                                 if (m_bodyPath != null)
                                 {
                                     message += "to file";
-                                    ok = putResourceBodyFilesystem(edit, new ByteArrayInputStream(body), m_bodyPath);
+                                    ok = putResourceBodyFilesystem(m_bodyPath, edit, new ByteArrayInputStream(body));
                                 }
 
                                 // otherwise use the database
@@ -1885,14 +1914,7 @@
                    // if we have been configured to use an external file system
                    if (m_bodyPath != null)
                    {
-                       // form the file name
-                       File file = new File(externalResourceFileName(m_bodyPathDeleted, edit));
-
-                       // delete
-                       if (file.exists())
-                       {
-                           file.delete();
-                       }                   
+                       delResourceBodyFilesystem(m_bodyPathDeleted, edit);   
                    }
 
                    // otherwise use the database
@@ -1995,7 +2017,7 @@
 						   if (m_bodyPath != null)
 						   {
 							   message += "to file";
-							   ok = putResourceBodyFilesystem(edit, redit.m_contentStream, m_bodyPathDeleted);
+							   ok = putResourceBodyFilesystem(m_bodyPathDeleted, edit, redit.m_contentStream);
 						   }
 
 						   // otherwise use the database
@@ -2020,7 +2042,7 @@
 						   if (m_bodyPath != null)
 						   {
 							   message += "to file";
-							   ok = putResourceBodyFilesystem(edit, new ByteArrayInputStream(body), m_bodyPathDeleted);
+							   ok = putResourceBodyFilesystem(m_bodyPathDeleted, edit, new ByteArrayInputStream(body));
 						   }
 
 						   // otherwise use the database
@@ -2074,7 +2096,7 @@
 					   // if we have been configured to use an external file system
 					   if (removeContent) {
 						   M_log.info("Removing resource ("+edit.getId()+") content: "+m_bodyPath);
-						   delResourceBodyFilesystem(edit);
+						   delResourceBodyFilesystem(m_bodyPath, edit);
 					   } else {
 						   M_log.info("Removing original resource reference ("+edit.getId()+") without removing the actual content: "+m_bodyPath);
 					   }
@@ -2271,27 +2293,16 @@
 
         protected InputStream streamResourceBodyFilesystem(String rootFolder, ContentResource resource) throws ServerOverloadException
         {
-            // form the file name
-            File file = new File(externalResourceFileName(rootFolder,resource));
-
-            // read the new
-            try
-            {
-                FileInputStream in = new FileInputStream(file);
-                return in;
+            if(((BaseResourceEdit) resource).m_contentLength == 0){
+                //we don't write zero content files
+                return null;
             }
-            catch (FileNotFoundException t)
-            {
-                // If there is not supposed to be data in the file - simply return null
-                if (((BaseResourceEdit) resource).m_contentLength == 0)
-                {
-                    return null;
-                }
-
+            try{
+                return fileSystemHandler.getInputStream(((BaseResourceEdit) resource).m_id, rootFolder, ((BaseResourceEdit) resource).m_filePath);
+            }catch(IOException e){
                 // If we have a non-zero body length and reading failed, it is an error worth of note
-                M_log.warn(": failed to read resource: " + resource.getId() + " len: " + ((BaseResourceEdit) resource).m_contentLength + " : " + t);
-                throw new ServerOverloadException("failed to read resource body");
-                // return null;
+                M_log.warn("Failed to read resource: " + resource.getId() + " len: " + ((BaseResourceEdit) resource).m_contentLength, e);
+                throw new ServerOverloadException("Failed to read resource body", e);
             }
         }
 
@@ -2424,93 +2435,21 @@
          * @param stream
          * @return true if the resource body is written successfully, false otherwise.
          */
-        private boolean putResourceBodyFilesystem(ContentResourceEdit resource, InputStream stream, String rootFolder)
+        private boolean putResourceBodyFilesystem(String rootFolder, ContentResourceEdit resource, InputStream stream)
         {
-			// Do not create the files for resources with zero length bodies
-			if ((stream == null)) return true;
-
-			// form the file name
-			File file = new File(externalResourceFileName(rootFolder, resource));
-
-			// delete the old
-			if (file.exists())
-			{
-				file.delete();
-			}
-
-			FileOutputStream out = null;
-
-			// add the new
-			try
-			{
-				// make sure all directories are there
-				File container = file.getParentFile();
-				if (container != null)
-				{
-					container.mkdirs();
-				}
-
-				// write the file
-				out = new FileOutputStream(file);
-
-				int byteCount = 0;
-				// chunk
-				byte[] chunk = new byte[STREAM_BUFFER_SIZE];
-				int lenRead;
-				while ((lenRead = stream.read(chunk)) != -1)
-				{
-					out.write(chunk, 0, lenRead);
-					byteCount += lenRead;
-				}
-
-				resource.setContentLength(byteCount);
-				ResourcePropertiesEdit props = resource.getPropertiesEdit();
-				props.addProperty(ResourceProperties.PROP_CONTENT_LENGTH, Long.toString(byteCount));
-				if (resource.getContentType() != null)
-				{
-					props.addProperty(ResourceProperties.PROP_CONTENT_TYPE, resource.getContentType());
-				}
-			}
-			// catch (Throwable t)
-			// {
-			// M_log.warn(": failed to write resource: " + resource.getId() + " : " + t);
-			// return false;
-			// }
-			catch (IOException e)
-			{
-				M_log.warn("IOException", e);
-				return false;
-			}
-			finally
-			{
-				if (stream != null)
-				{
-					try
-					{
-						stream.close();
-					}
-					catch (IOException e)
-					{
-						// TODO Auto-generated catch block
-						M_log.warn("IOException ", e);
-					}
-				}
-
-				if (out != null)
-				{
-					try
-					{
-						out.close();
-					}
-					catch (IOException e)
-					{
-						// TODO Auto-generated catch block
-						M_log.warn("IOException ", e);
-					}
-				}
-			}
-
-			return true;
+			try {
+                long byteCount = fileSystemHandler.saveInputStream(((BaseResourceEdit) resource).m_id, rootFolder, ((BaseResourceEdit) resource).m_filePath, stream);
+                resource.setContentLength(byteCount);
+                ResourcePropertiesEdit props = resource.getPropertiesEdit();
+                props.addProperty(ResourceProperties.PROP_CONTENT_LENGTH, Long.toString(byteCount));
+                if (resource.getContentType() != null) {
+                    props.addProperty(ResourceProperties.PROP_CONTENT_TYPE, resource.getContentType());
+                }
+                return true;
+            } catch (IOException e) {
+                M_log.warn("IOException", e);
+                return false;
+            }
         }
 
         /**
@@ -2527,7 +2466,7 @@
             // Do not create the files for resources with zero length bodies
             if (body == null) return true;
 
-			return putResourceBodyFilesystem(resource, new ByteArrayInputStream(body), m_bodyPath);
+			return putResourceBodyFilesystem(m_bodyPath, resource, new ByteArrayInputStream(body));
 
         }
 
@@ -2558,16 +2497,9 @@
          * @param resource
          *        The resource whose body is being written.
          */
-        protected void delResourceBodyFilesystem(ContentResourceEdit resource)
+        protected void delResourceBodyFilesystem(String rootFolder, ContentResourceEdit resource)
         {
-            // form the file name
-            File file = new File(externalResourceFileName(m_bodyPath,resource));
-
-            // delete
-            if (file.exists())
-            {
-                file.delete();
-            }
+            fileSystemHandler.delete(((BaseResourceEdit) resource).m_id, rootFolder, ((BaseResourceEdit) resource).m_filePath);
         }
 
         public int getMemberCount(String collectionId)
@@ -2770,18 +2702,6 @@
 
     } // DbStorage
 
-    /**
-     * Form the full file path+name used to store the resource body in an external file system.
-     * 
-     * @param resource
-     *        The resource.
-     * @return The resource external file name.
-     */
-    protected String externalResourceFileName(String rootFolder, ContentResource resource)
-    {
-        return rootFolder + ((BaseResourceEdit) resource).m_filePath;
-    }
-
     @SuppressWarnings("unchecked")
     public Map<String, Long> getMostRecentUpdate(String id) 
     {
@@ -3001,7 +2921,7 @@
                         //m_sqlService.dbReadBinary(sourceConnection, sql, fields, body);
 
                         // write the body to the file
-                        boolean ok = ((DbStorage) m_storage).putResourceBodyFilesystem(edit, stream, m_bodyPath);
+                        boolean ok = ((DbStorage) m_storage).putResourceBodyFilesystem(m_bodyPath, edit, stream);
                         if (!ok)
                         {
                             M_log.warn("convertToFile: body file failure : " + id + " file: " + edit.m_filePath);
Index: kernel-impl/src/main/java/org/sakaiproject/content/impl/DefaultFileSystemHandler.java
===================================================================
--- kernel-impl/src/main/java/org/sakaiproject/content/impl/DefaultFileSystemHandler.java	(revision 0)
+++ kernel-impl/src/main/java/org/sakaiproject/content/impl/DefaultFileSystemHandler.java	(working copy)
@@ -0,0 +1,91 @@
+package org.sakaiproject.content.impl;
+
+import org.sakaiproject.content.api.FileSystemHandler;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import org.springframework.util.FileCopyUtils;
+
+/**
+ * The default implementation of FileSystemHandler.
+ * <p/>
+ * This class read and write files to local disk.
+ */
+public class DefaultFileSystemHandler implements FileSystemHandler {
+    private boolean useIdForFilePath = false;
+
+    /**
+	 * Default constructor.
+	 */
+    public DefaultFileSystemHandler() {
+    }
+    
+    /**
+     * Whether to use the id for the file path.
+     */
+    public void setUseIdForFilePath(boolean useIdForFilePath){
+        this.useIdForFilePath = useIdForFilePath;
+    }
+    
+    /**
+     * A Helper method to get the File object for the parameters.
+     * This method will look at the property useIdForFilePath to see if the 
+     * id must be used as the file path.
+     * 
+     * @param id The id of the resource.
+     * @param root The root of the storage.
+     * @param filePath The path to save the file to.
+     * @return The File object.
+     */
+    private File getFile(String id, String root, String filePath){
+        if(useIdForFilePath){
+            return new File(root, id);
+        }else{
+            return new File(root, filePath);
+        }
+    }
+
+    @Override
+    public InputStream getInputStream(String id, String root, String filePath) throws IOException {
+        return new FileInputStream(getFile(id, root, filePath));
+    }
+
+    @Override
+    public long saveInputStream(String id, String root, String filePath, InputStream stream) throws IOException {
+        // Do not create the files for resources with zero length bodies
+        if ((stream == null)) {
+            return 0L;
+        }
+
+        // form the file name
+        File file = getFile(id, root, filePath);
+
+        // delete the old
+        if (file.exists()) {
+            file.delete();
+        }
+
+        // add the new
+        // make sure all directories are there
+        File parent = file.getParentFile();
+        if (parent != null) {
+            parent.mkdirs();
+        }
+
+        // write the file
+        return FileCopyUtils.copy(stream, new FileOutputStream(file));
+    }
+
+    @Override
+    public boolean delete(String id, String root, String filePath){
+        File file = getFile(id, root, filePath);
+
+        // delete
+        if (file.exists()) {
+            return file.delete();
+        }
+        return false;
+    }
+}
Index: kernel-impl/src/main/java/org/sakaiproject/content/impl/util/StorageConverter.java
===================================================================
--- kernel-impl/src/main/java/org/sakaiproject/content/impl/util/StorageConverter.java	(revision 0)
+++ kernel-impl/src/main/java/org/sakaiproject/content/impl/util/StorageConverter.java	(working copy)
@@ -0,0 +1,390 @@
+package org.sakaiproject.content.impl.util;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Enumeration;
+import java.util.Properties;
+import java.util.concurrent.atomic.AtomicInteger;
+import javax.sql.DataSource;
+import org.apache.commons.beanutils.BeanUtils;
+import org.apache.commons.beanutils.MethodUtils;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.sakaiproject.content.api.FileSystemHandler;
+import org.sakaiproject.content.impl.ContentServiceSqlDefault;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowCallbackHandler;
+import org.springframework.jdbc.datasource.SimpleDriverDataSource;
+import org.springframework.jdbc.datasource.SingleConnectionDataSource;
+
+/**
+ * This is a utility class to convert the storage from one FileSystem to
+ * another.
+ *
+ * @author Jaques
+ */
+public class StorageConverter {
+    private static final Log log = LogFactory.getLog(StorageConverter.class);
+    /**
+     * The datasource for the database connections.
+     */
+    private DataSource dataSource;
+    /**
+     * The connection to the database.
+     */
+    private Connection connection;
+    /**
+     * The database connection driver.
+     */
+    private String connectionDriver;
+    /**
+     * The database connection URL.
+     */
+    private String connectionURL;
+    /**
+     * The database connection username.
+     */
+    private String connectionUsername;
+    /**
+     * The database connection password.
+     */
+    private String connectionPassword;
+    /**
+     * The sql to retrieve the content id's and paths.
+     * The id field must be the first field.
+     * The path field must be the second field.
+     */
+    private String contentSql = new ContentServiceSqlDefault().getResourceIdAndFilePath();
+    /**
+     * The root body path for the source resources.
+     */
+    private String sourceBodyPath;
+    /**
+     * The root body path for the destination resources.
+     */
+    private String destinationBodyPath;
+    /**
+     * The source file system handler.
+     */
+    private FileSystemHandler sourceFileSystemHandler;
+    /**
+     * The destination file system handler.
+     */
+    private FileSystemHandler destinationFileSystemHandler;
+    /**
+     * Whether to delete the resources from the source.
+     */
+    private boolean deleteFromSource = false;
+    /**
+     * Whether to ignore missing resources.
+     */
+    private boolean ignoreMissing = true;
+
+    /**
+     * Set the datasource for the database connections.
+     * Either the datasource, connection or the connection details (driver, url, 
+     * username and password) must be set.
+     */
+    public void setDataSource(DataSource dataSource) {
+        this.dataSource = dataSource;
+    }
+
+    /**
+     * Set the connection to the database.
+     * Either the datasource, connection or the connection details (driver, url, 
+     * username and password) must be set.
+     */
+    public void setConnection(Connection connection) {
+        this.connection = connection;
+    }
+
+    /**
+     * Set the database connection driver.
+     * Either the datasource, connection or the connection details (driver, url, 
+     * username and password) must be set.
+     */
+    public void setConnectionDriver(String connectionDriver) {
+        this.connectionDriver = connectionDriver;
+    }
+
+    /**
+     * Set the database connection URL.
+     * Either the datasource, connection or the connection details (driver, url, 
+     * username and password) must be set.
+     */
+    public void setConnectionURL(String connectionURL) {
+        this.connectionURL = connectionURL;
+    }
+
+    /**
+     * Set the database connection username.
+     * Either the datasource, connection or the connection details (driver, url, 
+     * username and password) must be set.
+     */
+    public void setConnectionUsername(String connectionUsername) {
+        this.connectionUsername = connectionUsername;
+    }
+
+    /**
+     * Set the database connection password.
+     * Either the datasource, connection or the connection details (driver, url, 
+     * username and password) must be set.
+     */
+    public void setConnectionPassword(String connectionPassword) {
+        this.connectionPassword = connectionPassword;
+    }
+
+    /**
+     * Set the sql to retrieve the content id's and paths.
+     * The id field must be the first field.
+     * The path field must be the second field.
+     */
+    public void setContentSql(String contentSql) {
+        this.contentSql = contentSql;
+    }
+
+    /**
+     * Set the root body path for the source resources.
+     */
+    public void setSourceBodyPath(String sourceBodyPath) {
+        this.sourceBodyPath = sourceBodyPath;
+    }
+
+    /**
+     * Set the root body path for the destination resources.
+     */
+    public void setDestinationBodyPath(String destinationBodyPath) {
+        this.destinationBodyPath = destinationBodyPath;
+    }
+
+    /**
+     * Set the source file system handler.
+     */
+    public void setSourceFileSystemHandler(FileSystemHandler source) {
+        this.sourceFileSystemHandler = source;
+    }
+
+    /**
+     * Set the destination file system handler.
+     */
+    public void setDestinationFileSystemHandler(FileSystemHandler destination) {
+        this.destinationFileSystemHandler = destination;
+    }
+
+    /**
+     * Set whether to delete the resources from the source.
+     */
+    public void setDeleteFromSource(boolean deleteFromSource) {
+        this.deleteFromSource = deleteFromSource;
+    }
+    
+    /**
+     * Setup the datasource. THis method first look for a valid datasource,
+     * then a connection and lastly will create a datasource from the 
+     * connection details.
+     */
+    private void setupDataSource() throws IllegalStateException{
+        if(dataSource != null){
+            return;
+        }
+        if(connection != null){
+            dataSource = new SingleConnectionDataSource(connection, false);
+            return;
+        }
+        try {
+            Class.forName(connectionDriver);
+            dataSource = new SimpleDriverDataSource(DriverManager.getDriver(connectionURL), connectionURL, connectionUsername, connectionPassword);
+        } catch (Exception e) {
+            throw new IllegalStateException("Either a valid datasource, connection or the connection details must be set!", e);
+        }
+    }
+
+    /**
+     * Transfer the resources from the source file system handler to the 
+     * destination.
+     */
+    public void convertStorage() {
+        log.info("Start converting storage....");
+        setupDataSource();
+        if (sourceFileSystemHandler == null) {
+            throw new IllegalStateException("The source FileSystemHandler must be set!");
+        }
+        if (destinationFileSystemHandler == null) {
+            throw new IllegalStateException("The destination FileSystemHandler must be set!");
+        }
+        final AtomicInteger counter = new AtomicInteger(0);
+        // read content_resource records that have null file path
+        JdbcTemplate template = new JdbcTemplate(dataSource);
+        template.query(contentSql, new RowCallbackHandler(){
+            public void processRow(ResultSet resultSet) throws SQLException{
+                counter.incrementAndGet();
+                String id = resultSet.getString(1);
+                String path = resultSet.getString(2);
+                try {
+                    InputStream input = sourceFileSystemHandler.getInputStream(id, sourceBodyPath, path);
+                    if(input != null){
+                        destinationFileSystemHandler.saveInputStream(id, destinationBodyPath, path, input);
+                    }
+                    if(deleteFromSource){
+                        sourceFileSystemHandler.delete(id, sourceBodyPath, path);
+                    }
+                } catch (IOException e) {
+                    if(ignoreMissing){
+                        print("Missing file: " + id);
+                    }else{
+                        log.error("Failed to read or write resources from or to the FileSystemHandlers", e);
+                        throw new SQLException("Failed to read or write resources from or to the FileSystemHandlers", e);
+                    }
+                }
+            }
+        });
+        log.info("Converted " + counter.get() + " records....");
+        log.info("Finished converting storage....");
+    }
+    
+    public static void main(String[] args) throws IOException, ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException{
+        print("Checking arguments...");
+        if(args == null || args.length == 0 || args[0].contains("help")){
+            printHelp();
+            return;
+        }
+        Properties p = readProperties(args);
+        print("Properties: " + p);
+        StorageConverter sc = new StorageConverter();
+        FileSystemHandler sourceFSH = null;
+        FileSystemHandler destinationFSH = null;
+        try{
+            print("Database connection...");
+            sc.setConnectionDriver(p.getProperty("connectionDriver"));
+            sc.setConnectionURL(p.getProperty("connectionURL"));
+            sc.setConnectionUsername(p.getProperty("connectionUsername"));
+            sc.setConnectionPassword(p.getProperty("connectionPassword"));
+            print("Source FileSystemHandler...");
+            sourceFSH = getFileSystemHandler(p, "sourceFileSystemHandler");
+            sc.setSourceBodyPath(p.getProperty("sourceBodyPath"));
+            sc.setSourceFileSystemHandler(sourceFSH);
+            sc.setDeleteFromSource(Boolean.parseBoolean(p.getProperty("deleteFromSource")));
+            print("Destination FileSystemHandler...");
+            destinationFSH = getFileSystemHandler(p, "destinationFileSystemHandler");
+            sc.setDestinationBodyPath(p.getProperty("destinationBodyPath"));
+            sc.setDestinationFileSystemHandler(destinationFSH);
+            if(p.containsKey("contentSql")){
+                sc.setContentSql(p.getProperty("contentSql"));
+            }
+            print("Running convert...");
+            sc.convertStorage();
+            print("Done...");
+        }finally{
+            destroy(sourceFSH);
+            destroy(destinationFSH);
+        }
+    }
+    
+    /**
+     * Calls the objects destroy method is it exists.
+     */
+    private static void destroy(Object o) throws IllegalAccessException, InvocationTargetException{
+        if(o == null) return;
+        print("Destroying " + o + "...");
+        try{
+            print("Check if there is a destroy method...");
+            MethodUtils.invokeExactMethod(o, "destroy", (Object[])null);
+            print("destroy method invoked...");
+        }catch(NoSuchMethodException e){
+            print("No destroy method...");
+        }
+    }
+    
+    /**
+     * Creates the FileSystemHandler and set all its properties. 
+     * Will also call the init method if ti exists.
+     */
+    private static FileSystemHandler getFileSystemHandler(Properties p, String fileSystemHandlerName) throws ClassNotFoundException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException{
+        String clazz = p.getProperty(fileSystemHandlerName);
+        print("Building FileSystemHandler: " + clazz);
+        Class<? extends FileSystemHandler> fshClass = Class.forName(clazz).asSubclass(FileSystemHandler.class);
+        FileSystemHandler fsh = fshClass.newInstance();
+        Enumeration<String> propertyNames = (Enumeration<String>) p.propertyNames();
+        while(propertyNames.hasMoreElements()){
+            String fullProperty = propertyNames.nextElement();
+            if(fullProperty.startsWith(fileSystemHandlerName + ".")){
+                String property = fullProperty.substring(fullProperty.indexOf(".")+1);
+                print("Setting property: " + property);
+                BeanUtils.setProperty(fsh, property, p.getProperty(fullProperty));
+            }
+        }
+        try{
+            print("Check if there is a init method...");
+            MethodUtils.invokeExactMethod(fsh, "init", (Object[])null);
+            print("init method invoked...");
+        }catch(NoSuchMethodException e){
+            print("No init method...");
+        }
+        print("Done with FileSystemHandler: " + clazz);
+        return fsh;
+    }
+
+    /**
+     * Read the properties file. Return null of the file is not found.
+     */
+    private static Properties readProperties(String[] args) throws IOException {
+        Properties p = new Properties(){
+
+            @Override
+            public String getProperty(String key) {
+                String prop = super.getProperty(key);
+                print("- Property " + key + "='" + prop + "'");
+                return prop;
+            }
+            
+        };
+        for(int i = 0; i < args.length; i++){
+            if("-p".equals(args[i])){
+                p.load(new FileInputStream(new File(args[++i])));
+            }
+            if(args[i].startsWith("-")){
+                p.put(args[i].substring(1), args[++i]);
+            }
+        }
+        return p;
+    }
+    
+    private static void printHelp(){
+        print("----------------------------------------------------------------------");
+        print("StorageConverter Help");
+        print("The StorageConverter needs properties to complete the conversion.");
+        print("These properties can either be loaded in a properties file indicated with '-p' followed by the location of the properties file");
+        print("or the properties specified in the arguments with a leading '-' followed by the values.");
+        print("");
+        print("Properties (mandatory):");
+        print("- connectionDriver: The database connection driver class.");
+        print("- connectionURL: The database connection URL.");
+        print("- connectionUsername: The database connection username.");
+        print("- connectionPassword: The database connection password.");
+        print("- sourceFileSystemHandler: This is the full class name of the source FileSystemHandler.");
+        print("- sourceFileSystemHandler.<some property>: You can set any property on the source FileSystemHandler by referensing their property names.");
+        print("- sourceBodyPath: The path set in sakai.properties for the source.");
+        print("- destinationFileSystemHandler: This is the full class name of the destination FileSystemHandler.");
+        print("- destinationFileSystemHandler.<some property>: You can set any property on the destination FileSystemHandler by referensing their property names.");
+        print("- destinationBodyPath: The path set in sakai.properties for the destination.");
+        print("");
+        print("Properties (optional):");
+        print("- deleteFromSource: Whether to delete the source files. Default false.");
+        print("- contentSql: The sql statement to retrieve the resource id's and paths. Default is new ContentServiceSqlDefault().getResourceIdAndFilePath()");
+        print("----------------------------------------------------------------------");
+    }
+    
+    /**
+     * Print the text to the screen.
+     */
+    private static void print(String text){
+        System.out.println(text);
+    }
+}
Index: pom.xml
===================================================================
--- pom.xml	(revision 311042)
+++ pom.xml	(working copy)
@@ -460,8 +460,16 @@
     </resources>
 
     <plugins>
-
 		<plugin>
+			<groupId>org.codehaus.mojo</groupId>
+            <artifactId>exec-maven-plugin</artifactId>
+            <version>1.3.1</version>
+            <configuration>
+				<executable>java</executable>
+				<skip>true</skip>
+            </configuration>
+        </plugin>
+		<plugin>
 			<inherited>true</inherited>
 			<groupId>org.sakaiproject.maven.plugins</groupId>
 			<artifactId>sakai</artifactId>
